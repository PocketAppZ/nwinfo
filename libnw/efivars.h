// SPDX-License-Identifier: Unlicense

#pragma once

#include <windows.h>

#define EFI_VARIABLE_NON_VOLATILE 0x00000001
#define EFI_VARIABLE_BOOTSERVICE_ACCESS 0x00000002
#define EFI_VARIABLE_RUNTIME_ACCESS 0x00000004
#define EFI_VARIABLE_HARDWARE_ERROR_RECORD 0x00000008
#define EFI_VARIABLE_AUTHENTICATED_WRITE_ACCESS 0x00000010
#define EFI_VARIABLE_TIME_BASED_AUTHENTICATED_WRITE_ACCESS 0x00000020
#define EFI_VARIABLE_APPEND_WRITE 0x00000040
#define EFI_VARIABLE_ENHANCED_AUTHENTICATED_ACCESS 0x00000080

#define EFI_OS_INDICATIONS_BOOT_TO_FW_UI                    0x0000000000000001
#define EFI_OS_INDICATIONS_TIMESTAMP_REVOCATION             0x0000000000000002
#define EFI_OS_INDICATIONS_FILE_CAPSULE_DELIVERY_SUPPORTED  0x0000000000000004
#define EFI_OS_INDICATIONS_FMP_CAPSULE_SUPPORTED            0x0000000000000008
#define EFI_OS_INDICATIONS_CAPSULE_RESULT_VAR_SUPPORTED     0x0000000000000010
#define EFI_OS_INDICATIONS_START_OS_RECOVERY                0x0000000000000020
#define EFI_OS_INDICATIONS_START_PLATFORM_RECOVERY          0x0000000000000040
#define EFI_OS_INDICATIONS_JSON_CONFIG_DATA_REFRESH         0x0000000000000080

typedef struct _VARIABLE_NAME
{
	ULONG NextEntryOffset;
	GUID VendorGuid;
	WCHAR Name[ANYSIZE_ARRAY];
} VARIABLE_NAME, * PVARIABLE_NAME;

typedef struct _VARIABLE_NAME_AND_VALUE
{
	ULONG NextEntryOffset;
	ULONG ValueOffset;
	ULONG ValueLength;
	ULONG Attributes;
	GUID VendorGuid;
	WCHAR Name[ANYSIZE_ARRAY];
	//BYTE Value[ANYSIZE_ARRAY];
} VARIABLE_NAME_AND_VALUE, * PVARIABLE_NAME_AND_VALUE;

typedef struct _EFI_LOAD_OPTION
{
	UINT32 Attributes;
	UINT16 FilePathListLength;
	WCHAR Description[ANYSIZE_ARRAY];
	// EFI_DEVICE_PATH_PROTOCOL FilePathList[];
	// UINT8 OptionalData[];
} EFI_LOAD_OPTION;

BOOL NWL_IsEfi(VOID);
DWORD NWL_GetEfiVar(LPCWSTR lpName, LPGUID lpGuid,
	PVOID pBuffer, DWORD nSize, PDWORD pdwAttribubutes);
VOID* NWL_GetEfiVarAlloc(LPCWSTR lpName, LPGUID lpGuid,
	PDWORD pdwSize, PDWORD pdwAttribubutes);
BOOL NWL_EnumerateEfiVar(PVARIABLE_NAME pVarName, PULONG pulSize);
